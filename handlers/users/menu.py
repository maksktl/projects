from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from data.relations import county_file
from handlers.users.start import bot_start
from keyboards.default.keyboards import country_keyboard, back_button
from loader import dp
from states.states import State
from utils.e_mail.email_commands import send_email


@dp.message_handler(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ")
async def select_country(message: types.Message, state: FSMContext):
    await State.country.set()
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=country_keyboard)


@dp.message_handler(state=State.country)
async def select_product(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.reset_state(with_data=True)
        await bot_start(message)
        return
    country = message.text
    if country not in county_file:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç—Ä–∞–Ω—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        return
    await state.update_data(file=county_file[country])
    await State.product_name.set()
    await message.answer("üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button)


@dp.message_handler(state=State.product_name)
async def enter_link(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await State.country.set()
        await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=country_keyboard)
        return
    await state.update_data(product=message.text)
    await State.link.set()
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:", reply_markup=back_button)


@dp.message_handler(state=State.link)
async def enter_email(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await State.product_name.set()
        await message.answer("üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button)
        return

    await state.update_data(link=message.text)
    await State.email.set()
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=back_button)


@dp.message_handler(state=State.email)
async def send_mail(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await State.link.set()
        await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:", reply_markup=back_button)
        return

    text = ""
    data = await state.get_data()
    file = str(data.get("file"))
    product = data.get("product")
    link = data.get("link")
    with open(file) as fl:
        for line in fl:
            text += line.encode('ascii', 'ignore').decode('ascii')
    text = text.format(product, link)

    try:
        send_email(message.text, "OLX —Ç–æ–≤–∞—Ä", text)
    except:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞")
        await state.reset_state(with_data=True)
        await bot_start(message)
        return

    await state.reset_state(with_data=True)
    await message.answer("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await bot_start(message)
